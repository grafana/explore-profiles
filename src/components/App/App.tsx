import * as React from 'react';
import { AppRootProps, GrafanaTheme2, PageLayoutType, PluginContextProvider, usePluginContext } from '@grafana/data';
import { Route, Switch, Redirect } from 'react-router-dom';
import '../../styles/styles.scss';
import TagExplorerView from '@pyroscope/pages/TagExplorerView';
import ContinuousSingleView from '@pyroscope/pages/ContinuousSingleView';
import ContinuousDiffView from '@pyroscope/pages/ContinuousDiffView';
import ContinuousComparisonView from '@pyroscope/pages/ContinuousComparisonView';
import { Provider } from 'react-redux';
import store from '@pyroscope/redux/store';
import { ROUTES } from '../../constants';
import { Icon, Label, Toggletip, VerticalGroup, useStyles2, useTheme2 } from '@grafana/ui';
import { prefixRoute, useNavigationLinksUpdate } from '../../utils/utils.routing';
import { Onboarding } from '../../pages/Onboarding';
import '../../utils/faro';
import { PyroscopeStateWrapper } from '../PyroscopeState/PyroscopeStateWrapper';
import { css } from '@emotion/css';
import { PluginPage } from '@grafana/runtime';
import { TitleReplacement } from './TitleReplacement';

// Extract version information from the package.json files
// The consequences of importing them into the source code are that the contents of these package files will be in the built result
// The pyroscope package file is publically available in open source, the plugin package file is not, but on the most part it resembles
// the boilerplate generated by Grafana's plugin scaffolding.
import pyroscopePackageJson from 'grafana-pyroscope/package.json';
import pluginPackageJson from '../../../package.json';
const { version: pyroscopeVersion } = pyroscopePackageJson;
const { version: appPluginVersion, dependencies } = pluginPackageJson;
const pyroscopeGitInfo = dependencies['grafana-pyroscope'];

// Module augmentation so that typescript sees our 'custom' element
declare global {
  // eslint-disable-next-line @typescript-eslint/no-namespace
  namespace JSX {
    interface IntrinsicElements {
      'pyroscope-app': React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
    }
  }
}

function Routes() {
  useNavigationLinksUpdate();

  const styles = useStyles2(getStyles);
  const {
    meta: {
      info: { updated },
    },
  } = usePluginContext();

  const versionInfo = React.useMemo(() => {
    const hash = pyroscopeGitInfo.split('#')[1];
    const commitURL = `https://github.com/grafana/pyroscope/commit/${hash}`;

    return (
      <VerticalGroup spacing="xs">
        <Label description={updated}>Cloud Profiles App: v{appPluginVersion}</Label>
        <Label description={hash}>
          OSS Pyroscope commit:
          <a href={commitURL} target="_blank" rel="noopener noreferrer" style={{ textDecoration: 'underline' }}>
            {pyroscopeVersion}
          </a>
        </Label>
      </VerticalGroup>
    );
  }, [updated]);

  return (
    <>
      <div className={styles.page}>
        <PyroscopeStateWrapper>
          <Switch>
            <Route path={prefixRoute(ROUTES.SINGLE_VIEW)} exact>
              <ContinuousSingleView />
            </Route>
            <Route path={prefixRoute(ROUTES.COMPARISON_DIFF_VIEW)} exact>
              <ContinuousDiffView />
            </Route>
            <Route path={prefixRoute(ROUTES.COMPARISON_VIEW)} exact>
              <ContinuousComparisonView />
            </Route>
            <Route path={prefixRoute(ROUTES.EXPLORE_VIEW)} exact>
              <TagExplorerView />
            </Route>
            {/* Default Route */}
            <Route>
              <Redirect to={prefixRoute(ROUTES.EXPLORE_VIEW)} />
            </Route>
          </Switch>
        </PyroscopeStateWrapper>
      </div>
      <div className={styles.versionTips}>
        <Toggletip content={versionInfo} theme="info" placement="top-start">
          <Icon name="info-circle" />
        </Toggletip>
      </div>
    </>
  );
}

export function App(props: AppRootProps) {
  const theme = useTheme2();

  const renderTitle = React.useCallback((title: string) => <TitleReplacement subtitle={title} />, []);

  return (
    <PluginContextProvider meta={props.meta}>
      <Provider store={store}>
        <Onboarding>
          <PluginPage layout={PageLayoutType.Standard} renderTitle={renderTitle}>
            <pyroscope-app className="app" data-theme={theme.name.toLowerCase()}>
              <div className="pyroscope-app">
                <Routes />
              </div>
            </pyroscope-app>
          </PluginPage>
        </Onboarding>
      </Provider>
    </PluginContextProvider>
  );
}

const getStyles = (theme: GrafanaTheme2) => ({
  page: css`
    background: ${theme.colors.background.canvas};
    padding: ${theme.spacing(2)};
    border: ${theme.colors.border.medium} solid 1px;
  `,
  logo: css`
    width: ${theme.spacing(6)};
    height: ${theme.spacing(6)};
  `,
  versionTips: css`
    position: relative;
    left: ${theme.spacing(3.5)};
    bottom: ${theme.spacing(1)};
    height: 0px;
    text-align: right;
  `,
});
