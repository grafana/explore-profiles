import { css } from '@emotion/css';
import { GrafanaTheme2, usePluginContext } from '@grafana/data';
import { config } from '@grafana/runtime';
import { Dropdown, IconButton, Menu, useStyles2 } from '@grafana/ui';
import React from 'react';

// Extract version information from the package.json files
// The consequences of importing them into the source code are that the contents of these package files will be in the built result
// The pyroscope package file is publically available in open source, the plugin package file is not, but on the most part it resembles
// the boilerplate generated by Grafana's plugin scaffolding.
import { GIT_COMMIT } from '../../version';

const pluginCommitSha: string = GIT_COMMIT;
const pluginCommitURL = `https://github.com/grafana/explore-profiles/commit/${pluginCommitSha}`;

const { buildInfo } = config;

const grafanaCommitURL = `https://github.com/grafana/grafana/commit/${buildInfo.commit}`;

function InfoMenuHeader() {
  const styles = useStyles2(getStyles);

  const {
    meta: {
      info: { version, updated },
    },
  } = usePluginContext();

  return (
    <div className={styles.menuHeader}>
      <h5>ðŸ”¥ Explore profiles v{version}</h5>
      <div className={styles.subTitle}>Last update: {updated}</div>
    </div>
  );
}

function InfoMenu() {
  const isDev = pluginCommitSha === 'dev';
  const shortCommitSha = isDev ? pluginCommitSha : pluginCommitSha.slice(0, 8);

  return (
    <Menu header={<InfoMenuHeader />}>
      <Menu.Item
        label={`Commit SHA: ${shortCommitSha}`}
        icon="github"
        onClick={() => window.open(pluginCommitURL)}
        disabled={isDev}
      />
      <Menu.Item
        label="Contribute"
        icon="external-link-alt"
        onClick={() => window.open('https://github.com/grafana/explore-profiles/blob/main/docs/CONTRIBUTING.md')}
      />
      <Menu.Item
        label="Documentation"
        icon="document-info"
        onClick={() => window.open('https://grafana.com/docs/grafana/latest/explore/simplified-exploration/profiles')}
      />
      <Menu.Divider />
      <Menu.Item
        label={`Grafana ${buildInfo.edition} v${buildInfo.version} (${buildInfo.env})`}
        icon="external-link-alt"
        onClick={() => window.open(grafanaCommitURL)}
      />
    </Menu>
  );
}

export function PluginInfo() {
  return (
    <Dropdown overlay={() => <InfoMenu />} placement="bottom-end">
      <IconButton name="info-circle" aria-label="Plugin info" title="Plugin info" />
    </Dropdown>
  );
}

const getStyles = (theme: GrafanaTheme2) => ({
  menuHeader: css`
    padding: ${theme.spacing(0.5, 1)};
    white-space: nowrap;
  `,
  subTitle: css`
    color: ${theme.colors.text.secondary};
    font-size: ${theme.typography.bodySmall.fontSize};
  `,
});
