// @generated by protoc-gen-es v2.2.3 with parameter "target=ts"
// @generated from file querier/v1/querier.proto (package querier.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { ProfileSchema } from "../../google/v1/profile_pb";
import { file_google_v1_profile } from "../../google/v1/profile_pb";
import type { GetProfileStatsRequestSchema, GetProfileStatsResponseSchema, LabelNamesRequestSchema, LabelNamesResponseSchema, Labels, LabelValuesRequestSchema, LabelValuesResponseSchema, ProfileType, Series, StackTraceSelector, TimeSeriesAggregationType } from "../../types/v1/types_pb";
import { file_types_v1_types } from "../../types/v1/types_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file querier/v1/querier.proto.
 */
export const file_querier_v1_querier: GenFile = /*@__PURE__*/
  fileDesc("ChhxdWVyaWVyL3YxL3F1ZXJpZXIucHJvdG8SCnF1ZXJpZXIudjEiMQoTUHJvZmlsZVR5cGVzUmVxdWVzdBINCgVzdGFydBgBIAEoAxILCgNlbmQYAiABKAMiRAoUUHJvZmlsZVR5cGVzUmVzcG9uc2USLAoNcHJvZmlsZV90eXBlcxgBIAMoCzIVLnR5cGVzLnYxLlByb2ZpbGVUeXBlIlIKDVNlcmllc1JlcXVlc3QSEAoIbWF0Y2hlcnMYASADKAkSEwoLbGFiZWxfbmFtZXMYAiADKAkSDQoFc3RhcnQYAyABKAMSCwoDZW5kGAQgASgDIjYKDlNlcmllc1Jlc3BvbnNlEiQKCmxhYmVsc19zZXQYAiADKAsyEC50eXBlcy52MS5MYWJlbHMivAEKHVNlbGVjdE1lcmdlU3RhY2t0cmFjZXNSZXF1ZXN0EhYKDnByb2ZpbGVfdHlwZUlEGAEgASgJEhYKDmxhYmVsX3NlbGVjdG9yGAIgASgJEg0KBXN0YXJ0GAMgASgDEgsKA2VuZBgEIAEoAxIWCgltYXhfbm9kZXMYBSABKANIAIgBARIpCgZmb3JtYXQYBiABKA4yGS5xdWVyaWVyLnYxLlByb2ZpbGVGb3JtYXRCDAoKX21heF9ub2RlcyJaCh5TZWxlY3RNZXJnZVN0YWNrdHJhY2VzUmVzcG9uc2USKgoKZmxhbWVncmFwaBgBIAEoCzIWLnF1ZXJpZXIudjEuRmxhbWVHcmFwaBIMCgR0cmVlGAIgASgMItMBCh1TZWxlY3RNZXJnZVNwYW5Qcm9maWxlUmVxdWVzdBIWCg5wcm9maWxlX3R5cGVJRBgBIAEoCRIWCg5sYWJlbF9zZWxlY3RvchgCIAEoCRIVCg1zcGFuX3NlbGVjdG9yGAMgAygJEg0KBXN0YXJ0GAQgASgDEgsKA2VuZBgFIAEoAxIWCgltYXhfbm9kZXMYBiABKANIAIgBARIpCgZmb3JtYXQYByABKA4yGS5xdWVyaWVyLnYxLlByb2ZpbGVGb3JtYXRCDAoKX21heF9ub2RlcyJaCh5TZWxlY3RNZXJnZVNwYW5Qcm9maWxlUmVzcG9uc2USKgoKZmxhbWVncmFwaBgBIAEoCzIWLnF1ZXJpZXIudjEuRmxhbWVHcmFwaBIMCgR0cmVlGAIgASgMIoABCgtEaWZmUmVxdWVzdBI3CgRsZWZ0GAEgASgLMikucXVlcmllci52MS5TZWxlY3RNZXJnZVN0YWNrdHJhY2VzUmVxdWVzdBI4CgVyaWdodBgCIAEoCzIpLnF1ZXJpZXIudjEuU2VsZWN0TWVyZ2VTdGFja3RyYWNlc1JlcXVlc3QiPgoMRGlmZlJlc3BvbnNlEi4KCmZsYW1lZ3JhcGgYASABKAsyGi5xdWVyaWVyLnYxLkZsYW1lR3JhcGhEaWZmIl8KCkZsYW1lR3JhcGgSDQoFbmFtZXMYASADKAkSIQoGbGV2ZWxzGAIgAygLMhEucXVlcmllci52MS5MZXZlbBINCgV0b3RhbBgDIAEoAxIQCghtYXhfc2VsZhgEIAEoAyKKAQoORmxhbWVHcmFwaERpZmYSDQoFbmFtZXMYASADKAkSIQoGbGV2ZWxzGAIgAygLMhEucXVlcmllci52MS5MZXZlbBINCgV0b3RhbBgDIAEoAxIQCghtYXhfc2VsZhgEIAEoAxIRCglsZWZ0VGlja3MYBSABKAMSEgoKcmlnaHRUaWNrcxgGIAEoAyIXCgVMZXZlbBIOCgZ2YWx1ZXMYASADKAMi5wEKGVNlbGVjdE1lcmdlUHJvZmlsZVJlcXVlc3QSFgoOcHJvZmlsZV90eXBlSUQYASABKAkSFgoObGFiZWxfc2VsZWN0b3IYAiABKAkSDQoFc3RhcnQYAyABKAMSCwoDZW5kGAQgASgDEhYKCW1heF9ub2RlcxgFIAEoA0gAiAEBEj8KFHN0YWNrX3RyYWNlX3NlbGVjdG9yGAYgASgLMhwudHlwZXMudjEuU3RhY2tUcmFjZVNlbGVjdG9ySAGIAQFCDAoKX21heF9ub2Rlc0IXChVfc3RhY2tfdHJhY2Vfc2VsZWN0b3IiyAIKE1NlbGVjdFNlcmllc1JlcXVlc3QSFgoOcHJvZmlsZV90eXBlSUQYASABKAkSFgoObGFiZWxfc2VsZWN0b3IYAiABKAkSDQoFc3RhcnQYAyABKAMSCwoDZW5kGAQgASgDEhAKCGdyb3VwX2J5GAUgAygJEgwKBHN0ZXAYBiABKAESPQoLYWdncmVnYXRpb24YByABKA4yIy50eXBlcy52MS5UaW1lU2VyaWVzQWdncmVnYXRpb25UeXBlSACIAQESPwoUc3RhY2tfdHJhY2Vfc2VsZWN0b3IYCCABKAsyHC50eXBlcy52MS5TdGFja1RyYWNlU2VsZWN0b3JIAYgBARISCgVsaW1pdBgJIAEoA0gCiAEBQg4KDF9hZ2dyZWdhdGlvbkIXChVfc3RhY2tfdHJhY2Vfc2VsZWN0b3JCCAoGX2xpbWl0IjgKFFNlbGVjdFNlcmllc1Jlc3BvbnNlEiAKBnNlcmllcxgBIAMoCzIQLnR5cGVzLnYxLlNlcmllcyJAChNBbmFseXplUXVlcnlSZXF1ZXN0Eg0KBXN0YXJ0GAIgASgDEgsKA2VuZBgDIAEoAxINCgVxdWVyeRgEIAEoCSJzChRBbmFseXplUXVlcnlSZXNwb25zZRIsCgxxdWVyeV9zY29wZXMYASADKAsyFi5xdWVyaWVyLnYxLlF1ZXJ5U2NvcGUSLQoMcXVlcnlfaW1wYWN0GAIgASgLMhcucXVlcmllci52MS5RdWVyeUltcGFjdCLXAQoKUXVlcnlTY29wZRIWCg5jb21wb25lbnRfdHlwZRgBIAEoCRIXCg9jb21wb25lbnRfY291bnQYAiABKAQSEwoLYmxvY2tfY291bnQYAyABKAQSFAoMc2VyaWVzX2NvdW50GAQgASgEEhUKDXByb2ZpbGVfY291bnQYBSABKAQSFAoMc2FtcGxlX2NvdW50GAYgASgEEhMKC2luZGV4X2J5dGVzGAcgASgEEhUKDXByb2ZpbGVfYnl0ZXMYCCABKAQSFAoMc3ltYm9sX2J5dGVzGAkgASgEImwKC1F1ZXJ5SW1wYWN0EiEKGXRvdGFsX2J5dGVzX2luX3RpbWVfcmFuZ2UYAiABKAQSHAoUdG90YWxfcXVlcmllZF9zZXJpZXMYAyABKAQSHAoUZGVkdXBsaWNhdGlvbl9uZWVkZWQYBCABKAgqZwoNUHJvZmlsZUZvcm1hdBIeChpQUk9GSUxFX0ZPUk1BVF9VTlNQRUNJRklFRBAAEh0KGVBST0ZJTEVfRk9STUFUX0ZMQU1FR1JBUEgQARIXChNQUk9GSUxFX0ZPUk1BVF9UUkVFEAIyuwcKDlF1ZXJpZXJTZXJ2aWNlElMKDFByb2ZpbGVUeXBlcxIfLnF1ZXJpZXIudjEuUHJvZmlsZVR5cGVzUmVxdWVzdBogLnF1ZXJpZXIudjEuUHJvZmlsZVR5cGVzUmVzcG9uc2UiABJMCgtMYWJlbFZhbHVlcxIcLnR5cGVzLnYxLkxhYmVsVmFsdWVzUmVxdWVzdBodLnR5cGVzLnYxLkxhYmVsVmFsdWVzUmVzcG9uc2UiABJJCgpMYWJlbE5hbWVzEhsudHlwZXMudjEuTGFiZWxOYW1lc1JlcXVlc3QaHC50eXBlcy52MS5MYWJlbE5hbWVzUmVzcG9uc2UiABJBCgZTZXJpZXMSGS5xdWVyaWVyLnYxLlNlcmllc1JlcXVlc3QaGi5xdWVyaWVyLnYxLlNlcmllc1Jlc3BvbnNlIgAScQoWU2VsZWN0TWVyZ2VTdGFja3RyYWNlcxIpLnF1ZXJpZXIudjEuU2VsZWN0TWVyZ2VTdGFja3RyYWNlc1JlcXVlc3QaKi5xdWVyaWVyLnYxLlNlbGVjdE1lcmdlU3RhY2t0cmFjZXNSZXNwb25zZSIAEnEKFlNlbGVjdE1lcmdlU3BhblByb2ZpbGUSKS5xdWVyaWVyLnYxLlNlbGVjdE1lcmdlU3BhblByb2ZpbGVSZXF1ZXN0GioucXVlcmllci52MS5TZWxlY3RNZXJnZVNwYW5Qcm9maWxlUmVzcG9uc2UiABJRChJTZWxlY3RNZXJnZVByb2ZpbGUSJS5xdWVyaWVyLnYxLlNlbGVjdE1lcmdlUHJvZmlsZVJlcXVlc3QaEi5nb29nbGUudjEuUHJvZmlsZSIAElMKDFNlbGVjdFNlcmllcxIfLnF1ZXJpZXIudjEuU2VsZWN0U2VyaWVzUmVxdWVzdBogLnF1ZXJpZXIudjEuU2VsZWN0U2VyaWVzUmVzcG9uc2UiABI7CgREaWZmEhcucXVlcmllci52MS5EaWZmUmVxdWVzdBoYLnF1ZXJpZXIudjEuRGlmZlJlc3BvbnNlIgASWAoPR2V0UHJvZmlsZVN0YXRzEiAudHlwZXMudjEuR2V0UHJvZmlsZVN0YXRzUmVxdWVzdBohLnR5cGVzLnYxLkdldFByb2ZpbGVTdGF0c1Jlc3BvbnNlIgASUwoMQW5hbHl6ZVF1ZXJ5Eh8ucXVlcmllci52MS5BbmFseXplUXVlcnlSZXF1ZXN0GiAucXVlcmllci52MS5BbmFseXplUXVlcnlSZXNwb25zZSIAYgZwcm90bzM", [file_google_v1_profile, file_types_v1_types]);

/**
 * @generated from message querier.v1.ProfileTypesRequest
 */
export type ProfileTypesRequest = Message<"querier.v1.ProfileTypesRequest"> & {
  /**
   * Milliseconds since epoch. If missing or zero, only the ingesters will be
   * queried.
   *
   * @generated from field: int64 start = 1;
   */
  start: bigint;

  /**
   * Milliseconds since epoch. If missing or zero, only the ingesters will be
   * queried.
   *
   * @generated from field: int64 end = 2;
   */
  end: bigint;
};

/**
 * Describes the message querier.v1.ProfileTypesRequest.
 * Use `create(ProfileTypesRequestSchema)` to create a new message.
 */
export const ProfileTypesRequestSchema: GenMessage<ProfileTypesRequest> = /*@__PURE__*/
  messageDesc(file_querier_v1_querier, 0);

/**
 * @generated from message querier.v1.ProfileTypesResponse
 */
export type ProfileTypesResponse = Message<"querier.v1.ProfileTypesResponse"> & {
  /**
   * @generated from field: repeated types.v1.ProfileType profile_types = 1;
   */
  profileTypes: ProfileType[];
};

/**
 * Describes the message querier.v1.ProfileTypesResponse.
 * Use `create(ProfileTypesResponseSchema)` to create a new message.
 */
export const ProfileTypesResponseSchema: GenMessage<ProfileTypesResponse> = /*@__PURE__*/
  messageDesc(file_querier_v1_querier, 1);

/**
 * @generated from message querier.v1.SeriesRequest
 */
export type SeriesRequest = Message<"querier.v1.SeriesRequest"> & {
  /**
   * @generated from field: repeated string matchers = 1;
   */
  matchers: string[];

  /**
   * @generated from field: repeated string label_names = 2;
   */
  labelNames: string[];

  /**
   * Milliseconds since epoch. If missing or zero, only the ingesters will be
   * queried.
   *
   * @generated from field: int64 start = 3;
   */
  start: bigint;

  /**
   * Milliseconds since epoch. If missing or zero, only the ingesters will be
   * queried.
   *
   * @generated from field: int64 end = 4;
   */
  end: bigint;
};

/**
 * Describes the message querier.v1.SeriesRequest.
 * Use `create(SeriesRequestSchema)` to create a new message.
 */
export const SeriesRequestSchema: GenMessage<SeriesRequest> = /*@__PURE__*/
  messageDesc(file_querier_v1_querier, 2);

/**
 * @generated from message querier.v1.SeriesResponse
 */
export type SeriesResponse = Message<"querier.v1.SeriesResponse"> & {
  /**
   * @generated from field: repeated types.v1.Labels labels_set = 2;
   */
  labelsSet: Labels[];
};

/**
 * Describes the message querier.v1.SeriesResponse.
 * Use `create(SeriesResponseSchema)` to create a new message.
 */
export const SeriesResponseSchema: GenMessage<SeriesResponse> = /*@__PURE__*/
  messageDesc(file_querier_v1_querier, 3);

/**
 * @generated from message querier.v1.SelectMergeStacktracesRequest
 */
export type SelectMergeStacktracesRequest = Message<"querier.v1.SelectMergeStacktracesRequest"> & {
  /**
   * @generated from field: string profile_typeID = 1;
   */
  profileTypeID: string;

  /**
   * @generated from field: string label_selector = 2;
   */
  labelSelector: string;

  /**
   * Milliseconds since epoch.
   *
   * @generated from field: int64 start = 3;
   */
  start: bigint;

  /**
   * Milliseconds since epoch.
   *
   * @generated from field: int64 end = 4;
   */
  end: bigint;

  /**
   * Limit the nodes returned to only show the node with the max_node's biggest total
   *
   * @generated from field: optional int64 max_nodes = 5;
   */
  maxNodes?: bigint;

  /**
   * Profile format specifies the format of profile to be returned.
   * If not specified, the profile will be returned in flame graph format.
   *
   * @generated from field: querier.v1.ProfileFormat format = 6;
   */
  format: ProfileFormat;
};

/**
 * Describes the message querier.v1.SelectMergeStacktracesRequest.
 * Use `create(SelectMergeStacktracesRequestSchema)` to create a new message.
 */
export const SelectMergeStacktracesRequestSchema: GenMessage<SelectMergeStacktracesRequest> = /*@__PURE__*/
  messageDesc(file_querier_v1_querier, 4);

/**
 * @generated from message querier.v1.SelectMergeStacktracesResponse
 */
export type SelectMergeStacktracesResponse = Message<"querier.v1.SelectMergeStacktracesResponse"> & {
  /**
   * @generated from field: querier.v1.FlameGraph flamegraph = 1;
   */
  flamegraph?: FlameGraph;

  /**
   * Pyroscope tree bytes.
   *
   * @generated from field: bytes tree = 2;
   */
  tree: Uint8Array;
};

/**
 * Describes the message querier.v1.SelectMergeStacktracesResponse.
 * Use `create(SelectMergeStacktracesResponseSchema)` to create a new message.
 */
export const SelectMergeStacktracesResponseSchema: GenMessage<SelectMergeStacktracesResponse> = /*@__PURE__*/
  messageDesc(file_querier_v1_querier, 5);

/**
 * @generated from message querier.v1.SelectMergeSpanProfileRequest
 */
export type SelectMergeSpanProfileRequest = Message<"querier.v1.SelectMergeSpanProfileRequest"> & {
  /**
   * @generated from field: string profile_typeID = 1;
   */
  profileTypeID: string;

  /**
   * @generated from field: string label_selector = 2;
   */
  labelSelector: string;

  /**
   * @generated from field: repeated string span_selector = 3;
   */
  spanSelector: string[];

  /**
   * Milliseconds since epoch.
   *
   * @generated from field: int64 start = 4;
   */
  start: bigint;

  /**
   * Milliseconds since epoch.
   *
   * @generated from field: int64 end = 5;
   */
  end: bigint;

  /**
   * Limit the nodes returned to only show the node with the max_node's biggest total
   *
   * @generated from field: optional int64 max_nodes = 6;
   */
  maxNodes?: bigint;

  /**
   * Profile format specifies the format of profile to be returned.
   * If not specified, the profile will be returned in flame graph format.
   *
   * @generated from field: querier.v1.ProfileFormat format = 7;
   */
  format: ProfileFormat;
};

/**
 * Describes the message querier.v1.SelectMergeSpanProfileRequest.
 * Use `create(SelectMergeSpanProfileRequestSchema)` to create a new message.
 */
export const SelectMergeSpanProfileRequestSchema: GenMessage<SelectMergeSpanProfileRequest> = /*@__PURE__*/
  messageDesc(file_querier_v1_querier, 6);

/**
 * @generated from message querier.v1.SelectMergeSpanProfileResponse
 */
export type SelectMergeSpanProfileResponse = Message<"querier.v1.SelectMergeSpanProfileResponse"> & {
  /**
   * @generated from field: querier.v1.FlameGraph flamegraph = 1;
   */
  flamegraph?: FlameGraph;

  /**
   * Pyroscope tree bytes.
   *
   * @generated from field: bytes tree = 2;
   */
  tree: Uint8Array;
};

/**
 * Describes the message querier.v1.SelectMergeSpanProfileResponse.
 * Use `create(SelectMergeSpanProfileResponseSchema)` to create a new message.
 */
export const SelectMergeSpanProfileResponseSchema: GenMessage<SelectMergeSpanProfileResponse> = /*@__PURE__*/
  messageDesc(file_querier_v1_querier, 7);

/**
 * @generated from message querier.v1.DiffRequest
 */
export type DiffRequest = Message<"querier.v1.DiffRequest"> & {
  /**
   * @generated from field: querier.v1.SelectMergeStacktracesRequest left = 1;
   */
  left?: SelectMergeStacktracesRequest;

  /**
   * @generated from field: querier.v1.SelectMergeStacktracesRequest right = 2;
   */
  right?: SelectMergeStacktracesRequest;
};

/**
 * Describes the message querier.v1.DiffRequest.
 * Use `create(DiffRequestSchema)` to create a new message.
 */
export const DiffRequestSchema: GenMessage<DiffRequest> = /*@__PURE__*/
  messageDesc(file_querier_v1_querier, 8);

/**
 * @generated from message querier.v1.DiffResponse
 */
export type DiffResponse = Message<"querier.v1.DiffResponse"> & {
  /**
   * @generated from field: querier.v1.FlameGraphDiff flamegraph = 1;
   */
  flamegraph?: FlameGraphDiff;
};

/**
 * Describes the message querier.v1.DiffResponse.
 * Use `create(DiffResponseSchema)` to create a new message.
 */
export const DiffResponseSchema: GenMessage<DiffResponse> = /*@__PURE__*/
  messageDesc(file_querier_v1_querier, 9);

/**
 * @generated from message querier.v1.FlameGraph
 */
export type FlameGraph = Message<"querier.v1.FlameGraph"> & {
  /**
   * @generated from field: repeated string names = 1;
   */
  names: string[];

  /**
   * @generated from field: repeated querier.v1.Level levels = 2;
   */
  levels: Level[];

  /**
   * @generated from field: int64 total = 3;
   */
  total: bigint;

  /**
   * @generated from field: int64 max_self = 4;
   */
  maxSelf: bigint;
};

/**
 * Describes the message querier.v1.FlameGraph.
 * Use `create(FlameGraphSchema)` to create a new message.
 */
export const FlameGraphSchema: GenMessage<FlameGraph> = /*@__PURE__*/
  messageDesc(file_querier_v1_querier, 10);

/**
 * @generated from message querier.v1.FlameGraphDiff
 */
export type FlameGraphDiff = Message<"querier.v1.FlameGraphDiff"> & {
  /**
   * @generated from field: repeated string names = 1;
   */
  names: string[];

  /**
   * @generated from field: repeated querier.v1.Level levels = 2;
   */
  levels: Level[];

  /**
   * @generated from field: int64 total = 3;
   */
  total: bigint;

  /**
   * @generated from field: int64 max_self = 4;
   */
  maxSelf: bigint;

  /**
   * @generated from field: int64 leftTicks = 5;
   */
  leftTicks: bigint;

  /**
   * @generated from field: int64 rightTicks = 6;
   */
  rightTicks: bigint;
};

/**
 * Describes the message querier.v1.FlameGraphDiff.
 * Use `create(FlameGraphDiffSchema)` to create a new message.
 */
export const FlameGraphDiffSchema: GenMessage<FlameGraphDiff> = /*@__PURE__*/
  messageDesc(file_querier_v1_querier, 11);

/**
 * @generated from message querier.v1.Level
 */
export type Level = Message<"querier.v1.Level"> & {
  /**
   * @generated from field: repeated int64 values = 1;
   */
  values: bigint[];
};

/**
 * Describes the message querier.v1.Level.
 * Use `create(LevelSchema)` to create a new message.
 */
export const LevelSchema: GenMessage<Level> = /*@__PURE__*/
  messageDesc(file_querier_v1_querier, 12);

/**
 * @generated from message querier.v1.SelectMergeProfileRequest
 */
export type SelectMergeProfileRequest = Message<"querier.v1.SelectMergeProfileRequest"> & {
  /**
   * @generated from field: string profile_typeID = 1;
   */
  profileTypeID: string;

  /**
   * @generated from field: string label_selector = 2;
   */
  labelSelector: string;

  /**
   * Milliseconds since epoch.
   *
   * @generated from field: int64 start = 3;
   */
  start: bigint;

  /**
   * Milliseconds since epoch.
   *
   * @generated from field: int64 end = 4;
   */
  end: bigint;

  /**
   * Limit the nodes returned to only show the node with the max_node's biggest total
   *
   * @generated from field: optional int64 max_nodes = 5;
   */
  maxNodes?: bigint;

  /**
   * Select stack traces that match the provided selector.
   *
   * @generated from field: optional types.v1.StackTraceSelector stack_trace_selector = 6;
   */
  stackTraceSelector?: StackTraceSelector;
};

/**
 * Describes the message querier.v1.SelectMergeProfileRequest.
 * Use `create(SelectMergeProfileRequestSchema)` to create a new message.
 */
export const SelectMergeProfileRequestSchema: GenMessage<SelectMergeProfileRequest> = /*@__PURE__*/
  messageDesc(file_querier_v1_querier, 13);

/**
 * @generated from message querier.v1.SelectSeriesRequest
 */
export type SelectSeriesRequest = Message<"querier.v1.SelectSeriesRequest"> & {
  /**
   * @generated from field: string profile_typeID = 1;
   */
  profileTypeID: string;

  /**
   * @generated from field: string label_selector = 2;
   */
  labelSelector: string;

  /**
   * Milliseconds since epoch.
   *
   * @generated from field: int64 start = 3;
   */
  start: bigint;

  /**
   * Milliseconds since epoch.
   *
   * @generated from field: int64 end = 4;
   */
  end: bigint;

  /**
   * @generated from field: repeated string group_by = 5;
   */
  groupBy: string[];

  /**
   * @generated from field: double step = 6;
   */
  step: number;

  /**
   * Query resolution step width in seconds
   *
   * @generated from field: optional types.v1.TimeSeriesAggregationType aggregation = 7;
   */
  aggregation?: TimeSeriesAggregationType;

  /**
   * Select stack traces that match the provided selector.
   *
   * @generated from field: optional types.v1.StackTraceSelector stack_trace_selector = 8;
   */
  stackTraceSelector?: StackTraceSelector;

  /**
   * Select the top N series by total value.
   *
   * @generated from field: optional int64 limit = 9;
   */
  limit?: bigint;
};

/**
 * Describes the message querier.v1.SelectSeriesRequest.
 * Use `create(SelectSeriesRequestSchema)` to create a new message.
 */
export const SelectSeriesRequestSchema: GenMessage<SelectSeriesRequest> = /*@__PURE__*/
  messageDesc(file_querier_v1_querier, 14);

/**
 * @generated from message querier.v1.SelectSeriesResponse
 */
export type SelectSeriesResponse = Message<"querier.v1.SelectSeriesResponse"> & {
  /**
   * @generated from field: repeated types.v1.Series series = 1;
   */
  series: Series[];
};

/**
 * Describes the message querier.v1.SelectSeriesResponse.
 * Use `create(SelectSeriesResponseSchema)` to create a new message.
 */
export const SelectSeriesResponseSchema: GenMessage<SelectSeriesResponse> = /*@__PURE__*/
  messageDesc(file_querier_v1_querier, 15);

/**
 * @generated from message querier.v1.AnalyzeQueryRequest
 */
export type AnalyzeQueryRequest = Message<"querier.v1.AnalyzeQueryRequest"> & {
  /**
   * @generated from field: int64 start = 2;
   */
  start: bigint;

  /**
   * @generated from field: int64 end = 3;
   */
  end: bigint;

  /**
   * @generated from field: string query = 4;
   */
  query: string;
};

/**
 * Describes the message querier.v1.AnalyzeQueryRequest.
 * Use `create(AnalyzeQueryRequestSchema)` to create a new message.
 */
export const AnalyzeQueryRequestSchema: GenMessage<AnalyzeQueryRequest> = /*@__PURE__*/
  messageDesc(file_querier_v1_querier, 16);

/**
 * @generated from message querier.v1.AnalyzeQueryResponse
 */
export type AnalyzeQueryResponse = Message<"querier.v1.AnalyzeQueryResponse"> & {
  /**
   * detailed view of what the query will require
   *
   * @generated from field: repeated querier.v1.QueryScope query_scopes = 1;
   */
  queryScopes: QueryScope[];

  /**
   * summary of the query impact / performance
   *
   * @generated from field: querier.v1.QueryImpact query_impact = 2;
   */
  queryImpact?: QueryImpact;
};

/**
 * Describes the message querier.v1.AnalyzeQueryResponse.
 * Use `create(AnalyzeQueryResponseSchema)` to create a new message.
 */
export const AnalyzeQueryResponseSchema: GenMessage<AnalyzeQueryResponse> = /*@__PURE__*/
  messageDesc(file_querier_v1_querier, 17);

/**
 * @generated from message querier.v1.QueryScope
 */
export type QueryScope = Message<"querier.v1.QueryScope"> & {
  /**
   * a descriptive high level name of the component processing one part of the query (e.g., "short term storage")
   *
   * @generated from field: string component_type = 1;
   */
  componentType: string;

  /**
   * how many components of this type will process the query (indicator of read-path replication)
   *
   * @generated from field: uint64 component_count = 2;
   */
  componentCount: bigint;

  /**
   * @generated from field: uint64 block_count = 3;
   */
  blockCount: bigint;

  /**
   * @generated from field: uint64 series_count = 4;
   */
  seriesCount: bigint;

  /**
   * @generated from field: uint64 profile_count = 5;
   */
  profileCount: bigint;

  /**
   * @generated from field: uint64 sample_count = 6;
   */
  sampleCount: bigint;

  /**
   * @generated from field: uint64 index_bytes = 7;
   */
  indexBytes: bigint;

  /**
   * @generated from field: uint64 profile_bytes = 8;
   */
  profileBytes: bigint;

  /**
   * @generated from field: uint64 symbol_bytes = 9;
   */
  symbolBytes: bigint;
};

/**
 * Describes the message querier.v1.QueryScope.
 * Use `create(QueryScopeSchema)` to create a new message.
 */
export const QueryScopeSchema: GenMessage<QueryScope> = /*@__PURE__*/
  messageDesc(file_querier_v1_querier, 18);

/**
 * @generated from message querier.v1.QueryImpact
 */
export type QueryImpact = Message<"querier.v1.QueryImpact"> & {
  /**
   * @generated from field: uint64 total_bytes_in_time_range = 2;
   */
  totalBytesInTimeRange: bigint;

  /**
   * @generated from field: uint64 total_queried_series = 3;
   */
  totalQueriedSeries: bigint;

  /**
   * @generated from field: bool deduplication_needed = 4;
   */
  deduplicationNeeded: boolean;
};

/**
 * Describes the message querier.v1.QueryImpact.
 * Use `create(QueryImpactSchema)` to create a new message.
 */
export const QueryImpactSchema: GenMessage<QueryImpact> = /*@__PURE__*/
  messageDesc(file_querier_v1_querier, 19);

/**
 * @generated from enum querier.v1.ProfileFormat
 */
export enum ProfileFormat {
  /**
   * @generated from enum value: PROFILE_FORMAT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PROFILE_FORMAT_FLAMEGRAPH = 1;
   */
  FLAMEGRAPH = 1,

  /**
   * @generated from enum value: PROFILE_FORMAT_TREE = 2;
   */
  TREE = 2,
}

/**
 * Describes the enum querier.v1.ProfileFormat.
 */
export const ProfileFormatSchema: GenEnum<ProfileFormat> = /*@__PURE__*/
  enumDesc(file_querier_v1_querier, 0);

/**
 * @generated from service querier.v1.QuerierService
 */
export const QuerierService: GenService<{
  /**
   * ProfileType returns a list of the existing profile types.
   *
   * @generated from rpc querier.v1.QuerierService.ProfileTypes
   */
  profileTypes: {
    methodKind: "unary";
    input: typeof ProfileTypesRequestSchema;
    output: typeof ProfileTypesResponseSchema;
  },
  /**
   * LabelValues returns the existing label values for the provided label names.
   *
   * @generated from rpc querier.v1.QuerierService.LabelValues
   */
  labelValues: {
    methodKind: "unary";
    input: typeof LabelValuesRequestSchema;
    output: typeof LabelValuesResponseSchema;
  },
  /**
   * LabelNames returns a list of the existing label names.
   *
   * @generated from rpc querier.v1.QuerierService.LabelNames
   */
  labelNames: {
    methodKind: "unary";
    input: typeof LabelNamesRequestSchema;
    output: typeof LabelNamesResponseSchema;
  },
  /**
   * Series returns profiles series matching the request. A series is a unique label set.
   *
   * @generated from rpc querier.v1.QuerierService.Series
   */
  series: {
    methodKind: "unary";
    input: typeof SeriesRequestSchema;
    output: typeof SeriesResponseSchema;
  },
  /**
   * SelectMergeStacktraces returns matching profiles aggregated in a flamegraph format. It will combine samples from within the same callstack, with each element being grouped by its function name.
   *
   * @generated from rpc querier.v1.QuerierService.SelectMergeStacktraces
   */
  selectMergeStacktraces: {
    methodKind: "unary";
    input: typeof SelectMergeStacktracesRequestSchema;
    output: typeof SelectMergeStacktracesResponseSchema;
  },
  /**
   * SelectMergeSpanProfile returns matching profiles aggregated in a flamegraph format. It will combine samples from within the same callstack, with each element being grouped by its function name.
   *
   * @generated from rpc querier.v1.QuerierService.SelectMergeSpanProfile
   */
  selectMergeSpanProfile: {
    methodKind: "unary";
    input: typeof SelectMergeSpanProfileRequestSchema;
    output: typeof SelectMergeSpanProfileResponseSchema;
  },
  /**
   * SelectMergeProfile returns matching profiles aggregated in pprof format. It will contain all information stored (so including filenames and line number, if ingested).
   *
   * @generated from rpc querier.v1.QuerierService.SelectMergeProfile
   */
  selectMergeProfile: {
    methodKind: "unary";
    input: typeof SelectMergeProfileRequestSchema;
    output: typeof ProfileSchema;
  },
  /**
   * SelectSeries returns a time series for the total sum of the requested profiles.
   *
   * @generated from rpc querier.v1.QuerierService.SelectSeries
   */
  selectSeries: {
    methodKind: "unary";
    input: typeof SelectSeriesRequestSchema;
    output: typeof SelectSeriesResponseSchema;
  },
  /**
   * Diff returns a diff of two profiles
   *
   * @generated from rpc querier.v1.QuerierService.Diff
   */
  diff: {
    methodKind: "unary";
    input: typeof DiffRequestSchema;
    output: typeof DiffResponseSchema;
  },
  /**
   * GetProfileStats returns profile stats for the current tenant.
   *
   * @generated from rpc querier.v1.QuerierService.GetProfileStats
   */
  getProfileStats: {
    methodKind: "unary";
    input: typeof GetProfileStatsRequestSchema;
    output: typeof GetProfileStatsResponseSchema;
  },
  /**
   * @generated from rpc querier.v1.QuerierService.AnalyzeQuery
   */
  analyzeQuery: {
    methodKind: "unary";
    input: typeof AnalyzeQueryRequestSchema;
    output: typeof AnalyzeQueryResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_querier_v1_querier, 0);

