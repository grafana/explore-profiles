// @generated by protoc-gen-es v2.2.3 with parameter "target=ts"
// @generated from file vcs/v1/vcs.proto (package vcs.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file vcs/v1/vcs.proto.
 */
export const file_vcs_v1_vcs: GenFile = /*@__PURE__*/
  fileDesc("ChB2Y3MvdjEvdmNzLnByb3RvEgZ2Y3MudjEiEgoQR2l0aHViQXBwUmVxdWVzdCIlChFHaXRodWJBcHBSZXNwb25zZRIQCghjbGllbnRJRBgBIAEoCSIvChJHaXRodWJMb2dpblJlcXVlc3QSGQoRYXV0aG9yaXphdGlvbkNvZGUYASABKAkicAoTR2l0aHViTG9naW5SZXNwb25zZRIOCgZjb29raWUYASABKAkSDQoFdG9rZW4YAiABKAkSGAoQdG9rZW5fZXhwaXJlc19hdBgDIAEoAxIgChhyZWZyZXNoX3Rva2VuX2V4cGlyZXNfYXQYBCABKAMiFgoUR2l0aHViUmVmcmVzaFJlcXVlc3QicgoVR2l0aHViUmVmcmVzaFJlc3BvbnNlEg4KBmNvb2tpZRgBIAEoCRINCgV0b2tlbhgCIAEoCRIYChB0b2tlbl9leHBpcmVzX2F0GAMgASgDEiAKGHJlZnJlc2hfdG9rZW5fZXhwaXJlc19hdBgEIAEoAyJZCg5HZXRGaWxlUmVxdWVzdBIVCg1yZXBvc2l0b3J5VVJMGAEgASgJEgsKA3JlZhgCIAEoCRIRCglsb2NhbFBhdGgYAyABKAkSEAoIcm9vdFBhdGgYBCABKAkiLwoPR2V0RmlsZVJlc3BvbnNlEg8KB2NvbnRlbnQYASABKAkSCwoDVVJMGAIgASgJIjYKEEdldENvbW1pdFJlcXVlc3QSFQoNcmVwb3NpdG9yeVVSTBgBIAEoCRILCgNyZWYYAiABKAkicgoRR2V0Q29tbWl0UmVzcG9uc2USDwoHbWVzc2FnZRgBIAEoCRIkCgZhdXRob3IYAiABKAsyFC52Y3MudjEuQ29tbWl0QXV0aG9yEgwKBGRhdGUYAyABKAkSCwoDc2hhGAQgASgJEgsKA1VSTBgFIAEoCSIwCgxDb21taXRBdXRob3ISDQoFbG9naW4YASABKAkSEQoJYXZhdGFyVVJMGAIgASgJImsKCkNvbW1pdEluZm8SDwoHbWVzc2FnZRgBIAEoCRIkCgZhdXRob3IYAiABKAsyFC52Y3MudjEuQ29tbWl0QXV0aG9yEgwKBGRhdGUYAyABKAkSCwoDc2hhGAQgASgJEgsKA1VSTBgFIAEoCSI5ChFHZXRDb21taXRzUmVxdWVzdBIWCg5yZXBvc2l0b3J5X3VybBgBIAEoCRIMCgRyZWZzGAIgAygJIjkKEkdldENvbW1pdHNSZXNwb25zZRIjCgdjb21taXRzGAEgAygLMhIudmNzLnYxLkNvbW1pdEluZm8yswMKClZDU1NlcnZpY2USQgoJR2l0aHViQXBwEhgudmNzLnYxLkdpdGh1YkFwcFJlcXVlc3QaGS52Y3MudjEuR2l0aHViQXBwUmVzcG9uc2UiABJICgtHaXRodWJMb2dpbhIaLnZjcy52MS5HaXRodWJMb2dpblJlcXVlc3QaGy52Y3MudjEuR2l0aHViTG9naW5SZXNwb25zZSIAEk4KDUdpdGh1YlJlZnJlc2gSHC52Y3MudjEuR2l0aHViUmVmcmVzaFJlcXVlc3QaHS52Y3MudjEuR2l0aHViUmVmcmVzaFJlc3BvbnNlIgASPAoHR2V0RmlsZRIWLnZjcy52MS5HZXRGaWxlUmVxdWVzdBoXLnZjcy52MS5HZXRGaWxlUmVzcG9uc2UiABJCCglHZXRDb21taXQSGC52Y3MudjEuR2V0Q29tbWl0UmVxdWVzdBoZLnZjcy52MS5HZXRDb21taXRSZXNwb25zZSIAEkUKCkdldENvbW1pdHMSGS52Y3MudjEuR2V0Q29tbWl0c1JlcXVlc3QaGi52Y3MudjEuR2V0Q29tbWl0c1Jlc3BvbnNlIgBiBnByb3RvMw");

/**
 * @generated from message vcs.v1.GithubAppRequest
 */
export type GithubAppRequest = Message<"vcs.v1.GithubAppRequest"> & {
};

/**
 * Describes the message vcs.v1.GithubAppRequest.
 * Use `create(GithubAppRequestSchema)` to create a new message.
 */
export const GithubAppRequestSchema: GenMessage<GithubAppRequest> = /*@__PURE__*/
  messageDesc(file_vcs_v1_vcs, 0);

/**
 * @generated from message vcs.v1.GithubAppResponse
 */
export type GithubAppResponse = Message<"vcs.v1.GithubAppResponse"> & {
  /**
   * @generated from field: string clientID = 1;
   */
  clientID: string;
};

/**
 * Describes the message vcs.v1.GithubAppResponse.
 * Use `create(GithubAppResponseSchema)` to create a new message.
 */
export const GithubAppResponseSchema: GenMessage<GithubAppResponse> = /*@__PURE__*/
  messageDesc(file_vcs_v1_vcs, 1);

/**
 * @generated from message vcs.v1.GithubLoginRequest
 */
export type GithubLoginRequest = Message<"vcs.v1.GithubLoginRequest"> & {
  /**
   * @generated from field: string authorizationCode = 1;
   */
  authorizationCode: string;
};

/**
 * Describes the message vcs.v1.GithubLoginRequest.
 * Use `create(GithubLoginRequestSchema)` to create a new message.
 */
export const GithubLoginRequestSchema: GenMessage<GithubLoginRequest> = /*@__PURE__*/
  messageDesc(file_vcs_v1_vcs, 2);

/**
 * @generated from message vcs.v1.GithubLoginResponse
 */
export type GithubLoginResponse = Message<"vcs.v1.GithubLoginResponse"> & {
  /**
   * Deprecated
   * In future version, this cookie won't be sent. Now, old cookie is sent alongside the new expected
   * data (token, token_expires_at and refresh_token_expires_at). Frontend will be responsible of computing
   * its own cookie from the new data.
   * Remove after completing https://github.com/grafana/profiles-drilldown/issues/187
   *
   * @generated from field: string cookie = 1;
   */
  cookie: string;

  /**
   * base64 encoded encrypted token
   *
   * @generated from field: string token = 2;
   */
  token: string;

  /**
   * Unix ms timestamp of when the token expires.
   *
   * @generated from field: int64 token_expires_at = 3;
   */
  tokenExpiresAt: bigint;

  /**
   * Unix ms timestamp of when the refresh token expires.
   *
   * @generated from field: int64 refresh_token_expires_at = 4;
   */
  refreshTokenExpiresAt: bigint;
};

/**
 * Describes the message vcs.v1.GithubLoginResponse.
 * Use `create(GithubLoginResponseSchema)` to create a new message.
 */
export const GithubLoginResponseSchema: GenMessage<GithubLoginResponse> = /*@__PURE__*/
  messageDesc(file_vcs_v1_vcs, 3);

/**
 * @generated from message vcs.v1.GithubRefreshRequest
 */
export type GithubRefreshRequest = Message<"vcs.v1.GithubRefreshRequest"> & {
};

/**
 * Describes the message vcs.v1.GithubRefreshRequest.
 * Use `create(GithubRefreshRequestSchema)` to create a new message.
 */
export const GithubRefreshRequestSchema: GenMessage<GithubRefreshRequest> = /*@__PURE__*/
  messageDesc(file_vcs_v1_vcs, 4);

/**
 * @generated from message vcs.v1.GithubRefreshResponse
 */
export type GithubRefreshResponse = Message<"vcs.v1.GithubRefreshResponse"> & {
  /**
   * Deprecated
   * In future version, this cookie won't be sent. Now, old cookie is sent alongside the new expected
   * data (token, token_expires_at and refresh_token_expires_at). Frontend will be responsible of computing
   * its own cookie from the new data.
   * Remove after completing https://github.com/grafana/explore-profiles/issues/187
   *
   * @generated from field: string cookie = 1;
   */
  cookie: string;

  /**
   * base64 encoded encrypted token
   *
   * @generated from field: string token = 2;
   */
  token: string;

  /**
   * Unix ms timestamp of when the token expires.
   *
   * @generated from field: int64 token_expires_at = 3;
   */
  tokenExpiresAt: bigint;

  /**
   * Unix ms timestamp of when the refresh token expires.
   *
   * @generated from field: int64 refresh_token_expires_at = 4;
   */
  refreshTokenExpiresAt: bigint;
};

/**
 * Describes the message vcs.v1.GithubRefreshResponse.
 * Use `create(GithubRefreshResponseSchema)` to create a new message.
 */
export const GithubRefreshResponseSchema: GenMessage<GithubRefreshResponse> = /*@__PURE__*/
  messageDesc(file_vcs_v1_vcs, 5);

/**
 * @generated from message vcs.v1.GetFileRequest
 */
export type GetFileRequest = Message<"vcs.v1.GetFileRequest"> & {
  /**
   * the full path to the repository
   *
   * @generated from field: string repositoryURL = 1;
   */
  repositoryURL: string;

  /**
   * the vcs ref to get the file from
   *
   * @generated from field: string ref = 2;
   */
  ref: string;

  /**
   * the path to the file as provided by the symbols
   *
   * @generated from field: string localPath = 3;
   */
  localPath: string;

  /**
   * the root path where the project lives inside the repository
   *
   * @generated from field: string rootPath = 4;
   */
  rootPath: string;
};

/**
 * Describes the message vcs.v1.GetFileRequest.
 * Use `create(GetFileRequestSchema)` to create a new message.
 */
export const GetFileRequestSchema: GenMessage<GetFileRequest> = /*@__PURE__*/
  messageDesc(file_vcs_v1_vcs, 6);

/**
 * @generated from message vcs.v1.GetFileResponse
 */
export type GetFileResponse = Message<"vcs.v1.GetFileResponse"> & {
  /**
   * base64 content of the file
   *
   * @generated from field: string content = 1;
   */
  content: string;

  /**
   * the full URL to the file
   *
   * @generated from field: string URL = 2;
   */
  URL: string;
};

/**
 * Describes the message vcs.v1.GetFileResponse.
 * Use `create(GetFileResponseSchema)` to create a new message.
 */
export const GetFileResponseSchema: GenMessage<GetFileResponse> = /*@__PURE__*/
  messageDesc(file_vcs_v1_vcs, 7);

/**
 * @generated from message vcs.v1.GetCommitRequest
 */
export type GetCommitRequest = Message<"vcs.v1.GetCommitRequest"> & {
  /**
   * the full path to the repository
   *
   * @generated from field: string repositoryURL = 1;
   */
  repositoryURL: string;

  /**
   * the vcs ref to get the file from
   *
   * @generated from field: string ref = 2;
   */
  ref: string;
};

/**
 * Describes the message vcs.v1.GetCommitRequest.
 * Use `create(GetCommitRequestSchema)` to create a new message.
 */
export const GetCommitRequestSchema: GenMessage<GetCommitRequest> = /*@__PURE__*/
  messageDesc(file_vcs_v1_vcs, 8);

/**
 * @generated from message vcs.v1.GetCommitResponse
 */
export type GetCommitResponse = Message<"vcs.v1.GetCommitResponse"> & {
  /**
   * the commit message
   *
   * @generated from field: string message = 1;
   */
  message: string;

  /**
   * the commit author login
   *
   * @generated from field: vcs.v1.CommitAuthor author = 2;
   */
  author?: CommitAuthor;

  /**
   * the commit date
   *
   * @generated from field: string date = 3;
   */
  date: string;

  /**
   * the commit sha
   *
   * @generated from field: string sha = 4;
   */
  sha: string;

  /**
   * the full URL to the commit
   *
   * @generated from field: string URL = 5;
   */
  URL: string;
};

/**
 * Describes the message vcs.v1.GetCommitResponse.
 * Use `create(GetCommitResponseSchema)` to create a new message.
 */
export const GetCommitResponseSchema: GenMessage<GetCommitResponse> = /*@__PURE__*/
  messageDesc(file_vcs_v1_vcs, 9);

/**
 * @generated from message vcs.v1.CommitAuthor
 */
export type CommitAuthor = Message<"vcs.v1.CommitAuthor"> & {
  /**
   * the author login
   *
   * @generated from field: string login = 1;
   */
  login: string;

  /**
   * the author avatar URL
   *
   * @generated from field: string avatarURL = 2;
   */
  avatarURL: string;
};

/**
 * Describes the message vcs.v1.CommitAuthor.
 * Use `create(CommitAuthorSchema)` to create a new message.
 */
export const CommitAuthorSchema: GenMessage<CommitAuthor> = /*@__PURE__*/
  messageDesc(file_vcs_v1_vcs, 10);

/**
 * @generated from message vcs.v1.CommitInfo
 */
export type CommitInfo = Message<"vcs.v1.CommitInfo"> & {
  /**
   * the commit message
   *
   * @generated from field: string message = 1;
   */
  message: string;

  /**
   * the commit author login
   *
   * @generated from field: vcs.v1.CommitAuthor author = 2;
   */
  author?: CommitAuthor;

  /**
   * the commit date
   *
   * @generated from field: string date = 3;
   */
  date: string;

  /**
   * the commit sha
   *
   * @generated from field: string sha = 4;
   */
  sha: string;

  /**
   * the full URL to the commit
   *
   * @generated from field: string URL = 5;
   */
  URL: string;
};

/**
 * Describes the message vcs.v1.CommitInfo.
 * Use `create(CommitInfoSchema)` to create a new message.
 */
export const CommitInfoSchema: GenMessage<CommitInfo> = /*@__PURE__*/
  messageDesc(file_vcs_v1_vcs, 11);

/**
 * New messages for the GetCommits method
 *
 * @generated from message vcs.v1.GetCommitsRequest
 */
export type GetCommitsRequest = Message<"vcs.v1.GetCommitsRequest"> & {
  /**
   * @generated from field: string repository_url = 1;
   */
  repositoryUrl: string;

  /**
   * @generated from field: repeated string refs = 2;
   */
  refs: string[];
};

/**
 * Describes the message vcs.v1.GetCommitsRequest.
 * Use `create(GetCommitsRequestSchema)` to create a new message.
 */
export const GetCommitsRequestSchema: GenMessage<GetCommitsRequest> = /*@__PURE__*/
  messageDesc(file_vcs_v1_vcs, 12);

/**
 * @generated from message vcs.v1.GetCommitsResponse
 */
export type GetCommitsResponse = Message<"vcs.v1.GetCommitsResponse"> & {
  /**
   * @generated from field: repeated vcs.v1.CommitInfo commits = 1;
   */
  commits: CommitInfo[];
};

/**
 * Describes the message vcs.v1.GetCommitsResponse.
 * Use `create(GetCommitsResponseSchema)` to create a new message.
 */
export const GetCommitsResponseSchema: GenMessage<GetCommitsResponse> = /*@__PURE__*/
  messageDesc(file_vcs_v1_vcs, 13);

/**
 * @generated from service vcs.v1.VCSService
 */
export const VCSService: GenService<{
  /**
   * @generated from rpc vcs.v1.VCSService.GithubApp
   */
  githubApp: {
    methodKind: "unary";
    input: typeof GithubAppRequestSchema;
    output: typeof GithubAppResponseSchema;
  },
  /**
   * @generated from rpc vcs.v1.VCSService.GithubLogin
   */
  githubLogin: {
    methodKind: "unary";
    input: typeof GithubLoginRequestSchema;
    output: typeof GithubLoginResponseSchema;
  },
  /**
   * @generated from rpc vcs.v1.VCSService.GithubRefresh
   */
  githubRefresh: {
    methodKind: "unary";
    input: typeof GithubRefreshRequestSchema;
    output: typeof GithubRefreshResponseSchema;
  },
  /**
   * @generated from rpc vcs.v1.VCSService.GetFile
   */
  getFile: {
    methodKind: "unary";
    input: typeof GetFileRequestSchema;
    output: typeof GetFileResponseSchema;
  },
  /**
   * @generated from rpc vcs.v1.VCSService.GetCommit
   */
  getCommit: {
    methodKind: "unary";
    input: typeof GetCommitRequestSchema;
    output: typeof GetCommitResponseSchema;
  },
  /**
   * @generated from rpc vcs.v1.VCSService.GetCommits
   */
  getCommits: {
    methodKind: "unary";
    input: typeof GetCommitsRequestSchema;
    output: typeof GetCommitsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_vcs_v1_vcs, 0);

